            +--------------------------+
            |          OS 211          |
            |  TASK 3: VIRTUAL MEMORY  |
            |      DESIGN DOCUMENT     |
            +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Rishiraj Bheenick    <rnb14@imperial.ac.uk>
Toma Alexandru       <ait15@imperial.ac.uk>
Mihai Vanea          <mv1315@imperial.ac.uk>
Arthur Mihai Niculae <an3315@imperial.ac.uk>
Fraser Price         <fp914@imperial.ac.uk>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, or notes for the
>> markers, please give them here.

None.


>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

None.


            PAGE TABLE MANAGEMENT
            =====================

---- DATA STRUCTURES ----

>> A1: (5 marks)
>> Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration that relates to your supplemental page table.
>> Identify the purpose of each in 25 words or less.

struct thread
  {
    …
#ifdef VM
    struct hash page_table;
    …
#endif
    …
  }

Each process keeps track of its own page table. This design allows us to easily
free all specific pages belonging to a certain process when process exits or in
case of an error.

enum location
  {
    SWAP, DISK, NOT_LOADED, FRAME
  };

Used to keep track of the location of a page weather it is in the physical
memory, swap, file system or not loaded.

struct page_table_entry
  {
    struct hash_elem hash_elem;
    void *pg_addr;
    enum location l;
    int mapping_index;
    int mapping_fd;
    int mapping_size;
  };

It is used to implement the supplementary page table. Each entry keeps the page
address, mapping index, mapping file descriptor, and the mapping size. hash_elem
is used to make a hash table out of it.


struct frame_table_entry
  {
    struct hash_elem hash_elem;
    void *pg_addr;
    struct page_table_entry *u_page;
  };


It is used to implement the frame table. Each entry keeps the address of the page
and a pointer to the page entry.


---- ALGORITHMS ----

>> A2: (5 marks)
>> Describe your code for locating the frame, if any, that contains
>> the data of a given page.

The page table is implemented on top of an hash table. We use this table
to insert and retrieve the entries in the table based on the page address.


>> A3: (5 marks)
>> How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame?
>> Your answer should include a discussion of how you have implemented
>> sharing of read only pages.

If 2 pages alias to a single frame and we try to access that, we only
update the accessed and dirty bits of the page that made the access.
If you share a read only page, that means you won’t have any
concurrency issues to deal with, hence no need for semaphores or any
mutual exclusion, you just go and access it.

---- SYNCHRONIZATION ----

>> A4: (5 marks)
>> When two user processes both need a new frame at the same time,
>> how are races avoided? You should consider both when there are
>> and are not free frames available in memory.

When two processes try to access the same frame at the same time
(Either by a retrieval or removal of a page) we acquire the lock of
the frame table (defined as a static variable at the top of frame.c)
right from the beginning and we release it at the end of the function
call.
In the function where we return the page and map it to the frame
slot (frame_get_page), we first initialise the lock, we obtain
a single free page (from the user pool) and return it to kernel
virtual address and we insert this new page in the current thread’s
page table and we set the location of this page to be the frame.
We allocate memory for the frame. If we have space and the
allocation doesn’t fail then we insert it into the frame table.
In the case where we don’t have enough space for a frame, we have 2 choices:
- If we can’t evict a page and swap is full, then we panic the kernel
- If we can’t evict a page and swap is not full, then we use the swap
space for creating the frame.

---- RATIONALE ----

>> A5: (5 marks)
>> Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

We chose a hash map to represent the mapping because it has constant time
insertion and deletion operations which are used a lot throughout the
implementation of the frame table and the page table.

               PAGING TO AND FROM DISK
               =======================

---- DATA STRUCTURES ----

>> B1: (5 marks)
>> Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration that relates to your frame table and swap table.
>> Identify the purpose of each in 25 words or less.

struct frame_table_entry
  {
    struct hash_elem hash_elem;
    void *pg_addr;
  };

hash_elem is used to implement a hash table. Each entry in the frame table keeps
an address of a user page.

struct swap_table_entry
  {
    struct hash_elem hash_elem;
    void *addr;
    block_sector_t sector;
  };

Used to implement a hash table that keeps mapping from page addresses to
block sector indices. Because the size of a sector is limited to 512B, and a page
has 4KB, we need to use 8 sector to store a page. Therefore the block sector
referred is the first used to store that particular page.


---- ALGORITHMS ----

>> B2: (5 marks)
>> When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

We implemented a clock eviction algorithm that searches for the least popular
page by checking the access bit of the pages. When we first encounter the page
that has the access bit set to false, we evict it.


>> B3: (5 marks)
>> When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

Because process q no longer uses that frame, it means that it was evicted in
the swap. When we evict a frame to the swap, we make sure that we add the
address of that frame to the swap table. We than remove the entry from the
page table hash map. Therefore, this means that process P will find that entry
as empty in the page table and can use it.


>> B4: (5 marks)
>> Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

When we have a page fault, we use is_stack_access () to determine if
the invalid memory access was a stack access. This method checks the
if the address of the fault is within a valid range for stack access,
i.e. within 32 bytes of esp and above 0.
If so, we get upage (user virtual page) and kpage (kernel virtual
address) values for the new page from the fault address and extend
the stack with this page accordingly.


---- SYNCHRONIZATION ----

>> B5: (5 marks)
>> Explain the basics of your VM synchronisation design.  In
>> particular, explain how it prevents deadlock.  (Refer to a
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

Our VM memory prevents any deadlock because we ensure mutual exclusion
between all threads (when threads have to access a common place in memory
we introduce a lock), at every point we make sure a thread does not hold
a resource while waiting for another one (this also wastes CPU cycles
unnecessarily) and we avoid cycles by not holding and then waiting for
a resource.

>> B6: (5 marks)
>> A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

In the case when the page fault is caused because the frame is full, and one of
Q's frames is evicted to swap, then we make sure that we call lock_acquire () on
the frame table lock ,ft_lock, when we enter
frame_evict_page (). P has mutual exclusion during the execution of the
function and Q need to wait for ft_lock to be released by P. When the frame was
successfully evicted, when P exits frame_evict_page () function, it calls
lock_release () on ft_lock. Then Q can acquire the ft_lock. There is only one
lock for the frame table, so only one process can do operations such as eviction.
On the other side, we haven't implemented page sharing successfully, therefore
there is no lock for ensuring mutex on writing to pages.
If we were going to do it, we would require Q acquire the ft_lock also when it
needs to write to the page.


>> B7: (5 marks)
>> Explain how you handle access to paged-out pages that occur
>> during system calls. How do you gracefully handle attempted
>> accesses to invalid virtual addresses?

Both the user and kernel can use the system calls. If it is a user, it could
need to access pages that are not in the memory, but in the swap or file system.
page_fault () will get called. If the page data is not null, we'll check the
location of it, weather it is in the swap, file system or it is not loaded. If
it is in the swap, we reclaim it. If it is in the file system, we read it in
from the file using the mapping id of the file. If it is not loaded we read it
in from the file system using the offset.


---- RATIONALE ----

>> B8: (5 marks)
>> A single lock for the whole VM system would make
>> synchronisation easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronisation and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

We use locks for shared resources. In the frame table we use 2 locks, one for
inserting and removing entries and another one for eviction. This allows us to
parallelise the tasks of eviction and the tasks of insertion and deletion from
frame table. For the supplementary page table we have one lock, as most
operations are either insert or delete. Also for swap table we use only one lock.
Overall, we didn't make use of too many locks and we try to minimise the lines
of code that run in mutex. We think that out code's parallelism is not affected
by this. On the other hand we don't think out design allows us to increase the
parallelism. If we tried to reduce the number of locks we use or the lines of
code that run in mutex, we could introduce new possibilities for deadlocks.


             MEMORY MAPPED FILES
             ===================

---- DATA STRUCTURES ----

>> C1: (5 marks)
>> Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration that relates to your file mapping table.
>> Identify the purpose of each in 25 words or less.

struct thread
  {
    …
#ifdef VM
    …
    int last_vm_file_map;
#endif
    …
  }

  struct page_table_entry
    {
    ...
      void *pg_addr;
      enum location l;
      struct file *f;
      int mapping_index;
      int map_id;
      ...
    };

Address of the last file which was mapped into virtual memory.

---- ALGORITHMS ----

>> C2: (5 marks)
>> Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

When we call mmap(), we create multiple pages based on the size of file. When we have
a page fault we write the contents of the file at the mapping index position
back to the page that faulted and we put in the frame.
We use the location member of the page table entry  to differentiate between
swap access and other kind of memory access and memory mapped files.
For eviction we use a clock algorithm that evicts the least popular page whenever
we put a page in a frame.


>> C3: (5 marks)
>> Explain how you determine whether a new file mapping overlaps
>> any existing segment.

We search through the whole virtual pages of the current process and if
any of these pages overlap the new file mapping, we mark it as a fail.


---- RATIONALE ----

>> C4: (5 marks)
>> Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

We differentiate between the locations of the virtual pages in the fault handler
and we treat each of them separately. We couldn't find a way to share the
reading from the file or the swap partition onto the page because this process
requires reading from different files at different positions and different
lengths.
