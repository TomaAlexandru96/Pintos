             +-------------------------+
             |         OS 211          |
             |  TASK 2: USER PROGRAMS  |
             |     DESIGN DOCUMENT     |
             +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Rishiraj Bheenick    <rnb14@imperial.ac.uk>
Toma Alexandru       <ait15@imperial.ac.uk>
Mihai Vanea          <mv1315@imperial.ac.uk>
Arthur Mihai Niculae <an3315@imperial.ac.uk>
Fraser Price         <fp914@imperial.ac.uk>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, or notes for the
>> markers, please give them here.

None.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: (2 marks)
>> Copy here the declaration of each new or changed `struct' or `struct' member,
>> global or static variable, `typedef', or enumeration. Identify the purpose of
>> each in 25 words or less.

struct thread
  {
    ...
    bool has_loaded;      /* If child has loaded successfully */
    ...
  }

The variable has_loaded is used to confirm the successful loading of the
child process.


---- ALGORITHMS ----

>> A2: (8 marks)
>> Briefly describe how you implemented argument parsing. In particular you
>> should mention how you arrange for the elements of argv[] to be in the right
>> order and how you avoid overflowing the stack page?

We use strtok_r() to tokenise the arguments at each whitespace. The first call
gives the first token. We allocate a page to store all the pointers to the arguments. For each
token, we first make space on the stack by decrementing the interrupt frame stack
pointer by the size of the token including the null terminator, because the
stack grows downwards. The string value of the token is copied on the stack
where the stack pointer is at. We then push the alignment on the stack by
decrementing the stack pointer a number of time equal to the stack pointer mod
4, as the addresses are 4 bytes. We then push the NULL sentinel. After that, for
each argument, we make space on the stack and push their pointers in reverse
order, because we use the value of argc to iterate through them, and before
doing this, argc already reached the number of arguments. In the end we make
space and push the pointer to the array of arguments, arguments count and the return
address, which is 0 and then we free the page used to store the arguments pointers.
To prevent stack overflows we limit the size of the size of the
command to the size of the page, 4kB and make it fit in one page. Therefore
only 1024 arguments are allowed for a command including the command itself.


 --- RATIONALE ----

>> A3: (5 marks)
>> Why does Pintos implement strtok_r() but not strtok()?

Because strtok() is not thread safe. strtok() uses an internal state to
remember the last position it has reached when parsing the input. That means
that if there is a thread switch while it runs, which can happen frequently in
Pintos, it will not be able to carry on, as it can't remember where it was left
at, strtok() is non-reentrant. On the other hand, strtok_r() has an extra argument,
SAVE_PTR which is the address of the char pointer where the tokenizer was left
at. So in the concurrent context of Pintos, strtok_r() is better because it is
thread safe.


>> A4: (10 marks)
>> In Pintos, the kernel separates commands into a executable name and
>> arguments. In Unix-like systems, the shell does this separation. Identify
>> at least two advantages of the Unix approach.

Firstly, in Pintos, if an exception such as a page fault or a bad pointer occurs, then the
kernel panics and the OS crushes. On the other hand, the shell is a user
process, so if a page fault occurs in a user process, in an Unix-like system
the kernel will receive an exit code of -1 from that process and it will
terminate that process, it will free the resources and it will call the
scheduler.
Secondly, you could put more arguments in the Unix-system approach, because the user address
space is much larger than the kernel address space.



                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: (10 marks)
>> Copy here the declaration of each new or changed `struct' or `struct' member,
>> global or static variable, `typedef', or enumeration. Identify the purpose of
>> each in 25 words or less.

The following were implemented in thread.h

struct list open_files;

This is a list of file_maps. It acts as a map from a file descriptor to a
pointer of an open file.

int last_fd;

It is used to keep the file descriptor of the current process and to assign a fd
to a newly open file.

struct list execuing_children;

List of the current executing children of the parent process. When a process
starts executing it is added to this list and it is removed when a process
exits, it is removed from here and added to finished children list. Used
in process_wait to get the child of a process.


struct list finished_children;

List of finished children. Used in process_wait to check if the process has
finished. If not, then either it is an error or set its has_waited to true and
return its return status.


struct thread *parent;

Reference to parent process. Used in process_exit to add the current thread that
exits to the parent's finished executing children list.


struct semaphore sema_wait;

Used in process_wait and process exit to ensure the process exits after its
resources were freed. It is downed when the process starts waiting and it is
upped after the process has finished waiting and all the resources were
freed.

struct semaphore sema_load

Used to ensure successful loading, by waiting for a process to load.


struct list_elem exec_children_elem;

Used to implement a list of executing child processes held by the parent on
struct thread.

struct file *deny_file;

bool has_waited;

True if the process has waited.

int return_status;

Keeps the return status of a process.

struct file_map
  {
    int fd;
    struct file *f;
    struct list_elem elem;
  };

Keeps map from a file descriptor to a file pointer. It also has a
list_elem, because we make a list of this struct.

typedef void (*sys_func) (struct intr_frame *);

Defines a type for the functions available in system calls which are added to the
mapping of system calls.

static struct lock file_lock;

A lock used for synchronising access to filesystem.

static sys_func syscall_map[32];

An array which maps the system call number with its corresponding function.


>> B2: (5 marks)
>> Describe how you associate file descriptors with open files. Are your file
>> descriptors unique within the entire OS or just within a single process?

In thread.h, in the struct thread, we implemented a structure, file_map. This
has three members, an int fd that holds the file descriptor, a pointer to a
struct file and a list_elem, as we make a list of struct file_map, which is
named open_files. Each node is a pair of a file descriptor and a pointer to an
open file. Because a user process can only have one thread, each user process will
have its own list of open files. Each user process has an associated last used fd number,
because each process is associated with an independent set of files. Initially each process' fd is
set to 2, because 0 and 1 are reserved for stdin and stdout. We also keep a
variable int last_fd in thread.h which holds the value of the last used fd number in the
current process. This comes in useful when we open a new file and need to give
it a file descriptor based on the current process. When a new file is open its
fd value is set to last_fd in syscall_open() and then we increment last_fd.
Within the same process, all open files will have
different fd numbers. When we create a different process, then the new process'
last fd always get initialised to 2, therefore this means that at the OS level
we can have different open files having the same file descriptor number.


---- ALGORITHMS ----

>> B3: (5 marks)
>> Describe how your code ensures safe memory access of user provided data from
>> within the kernel.

Whenever a system call is done, we check that
each argument is in the user space and also we check if it points to an
allocated memory address. This is done by calling is_pointer_valid() on the
pointer. At the top of the virtual memory is the kernel space and below it at
lower addresses is the user space. The macro PHYS_BASE helps us define the
beginning of the user address space. If the address is greater of equal to
PHYS_BASE it means that it is not part of the user address space. Also if
pagedir_get_page() returns NULL is means the page is not used. in the case of
any of those conditions, exit() gets called with error code -1. When an error
occurs we close all the files open in the current process, then we call
thread_exit() which will terminate the user process and will call the scheduler
and run the next thread.
In the case of accessing bad pointers, a page fault will occur in user mode and
we set the process return status to -1, free all resources used by the process
and exit immediately.


>> B4: (5 marks)
>> Suppose a system call passes the kernel a pointer to a full page
>> (4,096 bytes) of data that has to be copied from user space. What is the
>> least and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result? What about for a system
>> call that passes a pointer to only 2 bytes of data? How might you improve
>> these numbers?

We check the beginning and the end of the buffer, by using the function
is_pointer_valid which uses pagedir_get_page(), therefore the algorithm does 2 calls.
For 2 bytes of data use the same strategy as with larger buffers doing 2 calls as well.


>> B5: (8 marks)
>> Describe your implementation of the "wait" system call and how it interacts
>> with process termination for both the parent and child.

We first check if the process is in the finished children list of its parent. If
it is, we check if it already waited, but it was not terminated. If yes, we
return -1 as an exception occurred. Else, we say that it waited and we return its
return_status. If the process is not finished, then we set has_waited to true,
and we down the wait semaphore. After the child has exited, it informs the parent
that it has finished by upping the wait semaphore of the parent and putting himself,
in the finished children list. All the parent has to do is to lookup the finished_children
list and find the terminated child and get its return status.


>> B6: (5 marks)
>> Any access to user program memory at a user-specified address can fail due to
>> a bad pointer value. Such accesses must cause the process to be terminated.
>> System calls are fraught with such accesses, e.g. a "write" system call
>> requires reading the system call number from the user stack, then each of the
>> call's three arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point. This poses a design and error-handling problem:
>> how do you best avoid obscuring the primary function of code in a morass of
>> error-handling? Furthermore, when an error is detected, how do you ensure
>> that all temporarily allocated resources (locks, buffers, etc.) are freed?
>> In a paragraph, describe the strategy or strategies you adopted for managing
>> these issues.

We implemented a function is_pointer_valid that fails when the passed pointer is bad
and forces the process to exit with -1 return code. The function is called whenever
a system call requires a user pointer. We have also implemented a macro for checking
if the arguments are in the user space (ARGUMENTS_IN_USER_SPACE) which uses the
function is_pointer_valid and fails if the last argument is not in user space.

---- SYNCHRONIZATION ----

>> B7: (5 marks)
>> The "exec" system call returns -1 if loading the new executable fails, so it
>> cannot return before the new executable has completed loading. How does your
>> code ensure this? How is the load success/failure status passed back to the
>> thread that calls "exec"?

When a parent calls the exec system call it creates the child process and it
downs its load semaphore. If the loading of the child process fails it sets
its return_status to -1 and it calls
thread_exit() which calls process_exit() to free the resources, put the
child in the finished_children list of the parent and up the load
semaphore of the parent. After that the parent checks if the child is in the
finished_children and its has_loaded variable is set to false, it will return -1
for failed loading.


>> B8: (5 marks)
>> Consider parent process P with child process C. How do you ensure proper
>> synchronization and avoid race conditions when P calls wait(C) before or
>> after C exits? How do you ensure that all resources are freed in each case?
>> How about when P terminates, without waiting, before or after C exits? Your
>> answer must cover all four cases mentioned above and address resource freeing.

Case 1:
When P calls wait(C) before C exits, then when the process C finishes, it
informs process P by upping the wait semaphore, putting itself in the finished
children list of the parent process and freeing its resources.

Case 2:
When P calls wait(C) after C exits, by then the process C would already be
finished, it would have all of its resources freed and the parent can just look
up in the finished children list and get the return status.

Case 3, 4:
When P terminates without waiting, before or after C finishes, P does not
have any impact on C and C can finish as it normally does.


---- RATIONALE ----

>> B9: (5 marks)
>> Why did you choose to implement safe access of user memory from the kernel in
>> the way that you did?

Because it took little time to implement and it was easy to debug. We found
it easier to check in the system call if the user pointer is valid, because the
kernel only accesses the user memory using system calls. If the pointer is bad,
then exit() will call thread_exit() which calls process_exit(), which frees all
the resources of the process. If we were to do it by changing the page_fault()
implementation, we would need to call process_exit() here which free all the
process' children and also at the end it free page. The problem with this
approach is that we need to be able to tell the kernel that a page fault
occurred, by setting the current thread's return status to -1. The problem lies
in the fact that we need to get the return status from a thread which has been
destroyed, so the implementation is more complex, as we'd need to deal with more
concurrency issues.

>> B10: (5 marks)
>> What advantages or disadvantages can you see to your design for file
>> descriptors?

One disadvantage is the fact that we use a list of pairs to map a file descriptor
to an open file pointer, which are dynamically allocated. This means that we
keep another list in thread.h and an int, which takes more space on the page
it is allocated, therefore we have less space for the stack of the thread
that runs inside the user process.

One advantage is that it is very easy to assign file descriptor numbers to open
files, because we keep track of the last fd used, so a newly open file will take
the fd number of the current process, and then we increment current process' fd.
Therefore, the design was simple, easy to implement and easy to debug.

>> B11: (2 marks)
>> The default tid_t to pid_t mapping is the identity mapping. Did you change
>> this? Why?

No, because when we create a new process, its pid will be set to the tid, for
each user process. Each process has one thread and they share the pid. When a
new process is created, its pid will take the tid value of the thread that runs
it. This makes it easier to reason about processes. Changing that would make is
more complicated.
